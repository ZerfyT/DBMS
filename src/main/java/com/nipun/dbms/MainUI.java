package com.nipun.dbms;

import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.intellijthemes.*;
import com.nipun.dbms.DBManager;
import com.nipun.dbms.DBDataStore;
import com.nipun.dbms.Console;
import com.nipun.dbms.DBUtils;
import io.materialtheme.darkstackoverflow.DarkStackOverflowTheme;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import mdlaf.MaterialLookAndFeel;

/**
 *
 * @author Nipun
 */
public class MainUI extends javax.swing.JFrame {

    private static DBManager db;
    private static DBDataStore dataStore;
    private String currentDB;
    private String currentTB;
    private String currentDataType;
    private DefaultListModel<String> newColumnsArray;
    //private List<String> newColumnsArray;

    /**
     * Creates new form DatabaseManager
     */
    public MainUI() {
        initComponents();
        dataStore = DBDataStore.getInstance();
        db = DBManager.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmb_db = new javax.swing.JComboBox<>();
        cmb_tb = new javax.swing.JComboBox<>();
        bt_select_db = new javax.swing.JButton();
        bt_exit_db = new javax.swing.JButton();
        bt_select_tb = new javax.swing.JButton();
        bt_select_db2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txarea_console = new javax.swing.JTextArea();
        tab_pane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        bt_create_db = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        bt_delete_db = new javax.swing.JButton();
        txt_db_name = new javax.swing.JTextField();
        txt_db_name_delete = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txt_table_name = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_table_column = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmb_datatype = new javax.swing.JComboBox<>();
        txt_column_size = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_columns = new javax.swing.JList<>();
        bt_delete_selected_column = new javax.swing.JButton();
        bt_delete_table = new javax.swing.JButton();
        bt_submit_column = new javax.swing.JButton();
        bt_create_table = new javax.swing.JButton();
        chk_primary_key = new javax.swing.JCheckBox();
        chk_foreign_key = new javax.swing.JCheckBox();
        chk_notnull = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_view = new javax.swing.JTable();
        bt_insert_data = new javax.swing.JButton();
        bt_update_data = new javax.swing.JButton();
        bt_delete_row = new javax.swing.JButton();
        bt_delete_all_data = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Database");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Table");

        cmb_db.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_dbActionPerformed(evt);
            }
        });

        cmb_tb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        bt_select_db.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_select_db.setText("Select Database");
        bt_select_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_select_dbActionPerformed(evt);
            }
        });

        bt_exit_db.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_exit_db.setText("Exit Database");
        bt_exit_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_exit_dbActionPerformed(evt);
            }
        });

        bt_select_tb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_select_tb.setText("Select Table");
        bt_select_tb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_select_tbActionPerformed(evt);
            }
        });

        bt_select_db2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_select_db2.setText("Relation View");
        bt_select_db2.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmb_db, 0, 150, Short.MAX_VALUE)
                    .addComponent(cmb_tb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bt_select_db, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_select_tb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bt_exit_db, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_select_db2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmb_db, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_select_db)
                    .addComponent(bt_exit_db))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmb_tb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_select_tb)
                    .addComponent(bt_select_db2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txarea_console.setColumns(20);
        txarea_console.setRows(5);
        jScrollPane1.setViewportView(txarea_console);

        tab_pane.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        tab_pane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tab_paneFocusGained(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Create Database");

        bt_create_db.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_create_db.setText("Create");
        bt_create_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_create_dbActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Delete Database");

        bt_delete_db.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_delete_db.setText("Delete");
        bt_delete_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_delete_dbActionPerformed(evt);
            }
        });

        txt_db_name.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txt_db_name_delete.setEditable(false);
        txt_db_name_delete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_db_name_delete, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(txt_db_name))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_delete_db)
                    .addComponent(bt_create_db))
                .addContainerGap(441, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(txt_db_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_create_db))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(txt_db_name_delete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_delete_db))
                .addContainerGap(188, Short.MAX_VALUE))
        );

        tab_pane.addTab("Database", jPanel2);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Table Name");

        txt_table_name.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Column Name");

        txt_table_column.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Data Type");

        cmb_datatype.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txt_column_size.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_column_size.setToolTipText("");

        list_columns.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        list_columns.setToolTipText("Taable Columns");
        jScrollPane2.setViewportView(list_columns);

        bt_delete_selected_column.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_delete_selected_column.setText("Delete Selected Column");
        bt_delete_selected_column.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_delete_selected_columnActionPerformed(evt);
            }
        });

        bt_delete_table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_delete_table.setText("Delete Table");
        bt_delete_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_delete_tableActionPerformed(evt);
            }
        });

        bt_submit_column.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_submit_column.setText("Submit Column");
        bt_submit_column.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_submit_columnActionPerformed(evt);
            }
        });

        bt_create_table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_create_table.setText("Create Table");
        bt_create_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_create_tableActionPerformed(evt);
            }
        });

        chk_primary_key.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_primary_key.setText("Primary Key");

        chk_foreign_key.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_foreign_key.setText("Foreign Key");
        chk_foreign_key.setEnabled(false);

        chk_notnull.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chk_notnull.setText("Not Null");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_table_column)
                                    .addComponent(cmb_datatype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_table_name)))
                        .addGap(18, 18, 18)
                        .addComponent(txt_column_size, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bt_create_table, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 49, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(chk_primary_key)
                                .addGap(18, 18, 18)
                                .addComponent(chk_foreign_key)
                                .addGap(18, 18, 18)
                                .addComponent(chk_notnull))
                            .addComponent(bt_submit_column, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_delete_table, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_delete_selected_column, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel6)
                            .addComponent(txt_table_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel7)
                            .addComponent(txt_table_column, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cmb_datatype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_column_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chk_primary_key)
                            .addComponent(chk_foreign_key)
                            .addComponent(chk_notnull)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_submit_column)
                    .addComponent(bt_delete_selected_column))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_create_table)
                    .addComponent(bt_delete_table))
                .addGap(50, 50, 50))
        );

        tab_pane.addTab("Table", jPanel3);

        table_view.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table_view.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(table_view);

        bt_insert_data.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_insert_data.setText("Insert");
        bt_insert_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_insert_dataActionPerformed(evt);
            }
        });

        bt_update_data.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_update_data.setText("Update");
        bt_update_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_update_dataActionPerformed(evt);
            }
        });

        bt_delete_row.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_delete_row.setText("Delete Row");

        bt_delete_all_data.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        bt_delete_all_data.setText("Delete All Data");
        bt_delete_all_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_delete_all_dataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_update_data, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_delete_row, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_insert_data, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_delete_all_data, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bt_insert_data)
                .addGap(23, 23, 23)
                .addComponent(bt_update_data)
                .addGap(23, 23, 23)
                .addComponent(bt_delete_row)
                .addGap(23, 23, 23)
                .addComponent(bt_delete_all_data)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tab_pane.addTab("Insert / Update Data", jPanel5);

        jLabel5.setFont(new java.awt.Font("JetBrains Mono", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Database Management System");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tab_pane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tab_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ++ Button - Select Database
     */
    private void bt_select_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_select_dbActionPerformed
        if (!(cmb_db.getSelectedItem() == null)) {
            currentDB = cmb_db.getSelectedItem().toString();
            db.getDBConnection(currentDB);

            // Set Table List
            setTableList();

            txt_db_name_delete.setText(currentDB);
            cmb_db.setEnabled(false);
            enableItems(true, true, true, true);
        }
    }//GEN-LAST:event_bt_select_dbActionPerformed

    /**
     * ++ Button - Exit Database
     */
    private void bt_exit_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_exit_dbActionPerformed
//        cmb_db.setModel(new DefaultComboBoxModel<>());
        //cmb_tb.setModel(new DefaultComboBoxModel<>());
        db.closeDBConnection();

        txt_db_name_delete.setText("");
        cmb_db.setEnabled(true);
        tab_pane.setSelectedIndex(0);
        enableItems(false, false, false, false);
    }//GEN-LAST:event_bt_exit_dbActionPerformed

    private void bt_select_tbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_select_tbActionPerformed
        currentTB = cmb_tb.getSelectedItem().toString();
        initTableView();
        Console.print(currentTB);
    }//GEN-LAST:event_bt_select_tbActionPerformed

    /**
     * Button - Create New Table
     *
     * @param
     */
    private void bt_create_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_create_tableActionPerformed
        onCreateTable();
    }//GEN-LAST:event_bt_create_tableActionPerformed

    /**
     * Button - Submit New Column
     *
     * @param
     */
    private void bt_submit_columnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_submit_columnActionPerformed
        onSubmitTbColumn();
    }//GEN-LAST:event_bt_submit_columnActionPerformed

    /**
     *
     * Button - Delete Table
     *
     * @param
     */
    private void bt_delete_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_delete_tableActionPerformed
        if (!isEmpty(currentTB)) {
            currentTB = cmb_tb.getSelectedItem().toString();
            db.deleteSelectedTable(currentTB);
            dataStore.deleteTBFromDataStore(currentTB);
            currentTB = null;
            setTableList();
//            if (b) {
//                dataStore.deleteTBFromDataStore(currentTB);
//                currentTB = null;
//                setTableList();
//            }
        }
    }//GEN-LAST:event_bt_delete_tableActionPerformed

    /**
     * ++
     * Button - Delete Selected Column
     *
     * @param
     */
    private void bt_delete_selected_columnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_delete_selected_columnActionPerformed

        int index = list_columns.getSelectedIndex();
        if (index < 0 || index > list_columns.getModel().getSize()) {
            return;
        }
        //newColumnsArray.remove(index);
        //list_columns.setModel(new DefaultListModel<>(newColumnsArray.toArray(String[]::new)));

        newColumnsArray.remove(index);
    }//GEN-LAST:event_bt_delete_selected_columnActionPerformed

    /**
     * ++ Button - Create New Database
     */
    private void bt_create_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_create_dbActionPerformed
        String newDB = txt_db_name.getText();
        if (!newDB.isEmpty()) {
            db.createNewDatabase(newDB);
            dataStore.addDBToDataStore(newDB);

            txt_db_name.setText("");
            setDatabaseList();
        }
    }//GEN-LAST:event_bt_create_dbActionPerformed

    /**
     * ++
     * Button - Delete Selected Database
     */
    private void bt_delete_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_delete_dbActionPerformed
        if (!isEmpty(currentDB)) {
            db.deleteSelectedDatabase(currentDB);
            dataStore.deleteDBFromDataStore(currentDB);

            txt_db_name_delete.setText("");
            currentDB = null;
            cmb_db.setEnabled(true);
            enableItems(false, false, false, false);
            setDatabaseList();
        }
    }//GEN-LAST:event_bt_delete_dbActionPerformed

    private void cmb_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_dbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_dbActionPerformed

    private void tab_paneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tab_paneFocusGained
        //currentTB = cmb_tb.getSelectedItem().toString();
        //initTableView();
    }//GEN-LAST:event_tab_paneFocusGained

    private void bt_insert_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_insert_dataActionPerformed
        currentTB = cmb_tb.getSelectedItem().toString();
        int selectedRow = table_view.getSelectedRow();
        int columns = table_view.getColumnCount();
        StringBuilder data = new StringBuilder();

        if (isEmpty(currentTB)) {
            return;
        }

        if (selectedRow < 0) {
            Console.print("Please select a row");
            return;
        }

        for (int i = 0; i < columns; i++) {
            data.append(table_view.getValueAt(selectedRow, i));
            if (i != columns - 1) {
                data.append(",");
            }
        }

        if (data.toString().endsWith(",")) {
            Console.print("Please set the values to all columns");
            return;
        }

        if (db.insertDataToTable(currentTB, data.toString()) > 0) {
            Console.print("Row Added");
        }
        initTableView();
    }//GEN-LAST:event_bt_insert_dataActionPerformed

    private void bt_update_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_update_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_update_dataActionPerformed

    private void bt_delete_all_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_delete_all_dataActionPerformed
        if (isEmpty(currentTB)) {
            return;
        }
        currentTB = cmb_tb.getSelectedItem().toString();
        db.deleteAllDataInTable(currentTB);
        Console.print("Table data deleted.");
        initTableView();
        //int selectedRow = table_view.getSelectedRow();
    }//GEN-LAST:event_bt_delete_all_dataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        try {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with
         * the
         * default look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
//FlatIntelliJLaf.setup();
//        try {

//            javax.swing.UIManager.setLookAndFeel(new com.formdev.flatlaf.FlatIntelliJLaf());
//            UIManager.setLookAndFeel(new MaterialLookAndFeel(new DarkStackOverflowTheme()));
            FlatLightLaf.setup();
            UIManager.setLookAndFeel(new FlatHiberbeeDarkIJTheme());
//            UIManager.setLookAndFeel(new FlatMaterialDesignDarkIJTheme());
//            UIManager.setLookAndFeel(new com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubDarkContrastIJTheme());

//            UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (UnsupportedLookAndFeelException ex) {
        }
//        catch (UnsupportedLookAndFeelException ex) {
//            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        }
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DatabaseManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DatabaseManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DatabaseManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DatabaseManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(
                () -> {
                    MainUI main = new MainUI();
                    main.setVisible(true);

                    main.initDBMSView(main);
                }
        );

    }

    /**
     * Initilize the DBMS View.
     */
    private void initDBMSView(MainUI main) {
        Console.createConsole(txarea_console);

        boolean b1 = dataStore.initDataStore();
        boolean b2 = db.getDBConnection(" ");

        if (!b1 || !b2) {
            showDialog("Connection Error", "Error!");
            System.exit(1);
        } else {
            main.setDatabaseList();
            main.setDataTypes();
            main.enableItems(false, false, false, false);
//            main.enableItems(false, false, false, false, false);
        }
    }

    /**
     * Get custom Database list and set it to 'ComboBox'.
     */
    public void setDatabaseList() {
        clearComboBox(cmb_db);

        List<String> tmp = dataStore.getDatabases();
        if (tmp.isEmpty()) {
            Console.print("Database List is Empty.");
            return;
        }
        String[] SdbList = tmp.toArray(String[]::new);
        cmb_db.setModel(new DefaultComboBoxModel<>(SdbList));
//        cmb_db.setModel(new DefaultComboBoxModel<>((String[]) dblist.toArray()));
    }

    /**
     * Get custom Table list and set it to 'ComboBox'.
     */
    public void setTableList() {
        clearComboBox(cmb_tb);

        List<String> tmp = dataStore.getTables(currentDB);
        if (tmp.isEmpty()) {
            Console.print("Table List is Empty.");
            return;
        }
//        cmb_tb.setModel(new DefaultComboBoxModel<>(tmp.toArray(new String[tmp.size()])));
        cmb_tb.setModel(new DefaultComboBoxModel<>(tmp.toArray(String[]::new)));
    }

    public void onCreateTable() {
        String newTableName = txt_table_name.getText().trim();
        if (isEmpty(newTableName)) {
            Console.print("Please add a Table name");
            return;
        }
        if (newColumnsArray.isEmpty()) {
            Console.print("Please Add Some Columns.");
            return;
        }
        boolean createNewTable = db.createNewTable(newTableName, newColumnsArray);

        if (createNewTable) {
            dataStore.addTBToDataStore(currentDB, newTableName);
            setTableList();
        }
    }

    /**
     * Submit a new Column to ListView
     */
    public void onSubmitTbColumn() {

        StringBuilder column = new StringBuilder();
        String newColumnName = txt_table_column.getText().trim();
        currentDataType = cmb_datatype.getSelectedItem().toString();
        String newColumnSize = null;
        boolean isPrimaryKey = chk_primary_key.isSelected();
        boolean isForeignKey = chk_foreign_key.isSelected();
        boolean isNotNull = chk_notnull.isSelected();

        if (newColumnsArray == null || newColumnsArray.isEmpty()) {
            newColumnsArray = new DefaultListModel<>();
//            newColumnsArray = new ArrayList<>();
        }

        if (newColumnName.isEmpty()) {
            Console.print("Please add a Column Name.");
            return;
        } else if ((isEmpty(currentDataType))) {
            Console.print("Please Select a Data Type.");
            return;
        }

        // Check Data Type and Size
        switch (getWhichDataTypeRequired()) {
            case 0 ->
                newColumnSize = null;
            case 1 ->
                newColumnSize = getColumnSize();
            case 2 -> {
                if (getColumnSize() == null) {
                    Console.print("Please add Valid Number");
                    return;
                } else {
                    newColumnSize = getColumnSize();
                }
            }
        }

        if (isEmpty(newColumnSize)) {
            column.append("`" + newColumnName + "` " + currentDataType);
            //newColumnsArray.add(column.toString());
        } else {
            column.append("`" + newColumnName + "` " + currentDataType + "(" + newColumnSize + ")");
            //newColumnsArray.add(column.toString());
        }

        // Check Constraints
        if (isPrimaryKey) {
            column.append(" PRIMARY KEY");
        }
        if (isNotNull) {
            column.append(" NOT NULL");
        }

        newColumnsArray.addElement(column.toString());

        //DefaultListModel<String> d = new DefaultListModel<>();
        //d.addAll(newColumnsArray);
        list_columns.setModel(newColumnsArray);
        Console.print("Column added");
    }

    /**
     * Dynamicly enable or disable tabs according to database and table
     * selection. 1 = Table ComboBox, 2 = Button Select Table, 3 - 4 =
     * Table, Insert Tabs
     */
    private void enableItems(boolean... state) {
        cmb_tb.setEnabled(state[0]);
        bt_select_tb.setEnabled(state[1]);

        tab_pane.setEnabledAt(1, state[2]);
        tab_pane.setEnabledAt(2, state[3]);
//        for (int i = 2; i < state.length; i++) {
//            tab_pane.setEnabledAt(i, state[i + 1]);
//        }
    }

    public void setDataTypes() {
        List<String> tmp = DBUtils.getDataTypes();
        cmb_datatype.setModel(new DefaultComboBoxModel<>(tmp.toArray(String[]::new)));
    }

    /**
     * Check which data types required a size for new column
     *
     * @return 1 = Size in Int (Optional),
     *         2 = Size in Int (Required),
     *         3 = Not Required
     */
    public int getWhichDataTypeRequired() {
//        List<String> a = dbm.getDataTypes();
        final String c1 = "INTEGER SMALLINT BIGINT FLOAT DOUBLE DECIMAL CHAR";   // Size Optional
        final String c2 = "DATE TIME DATETIME YEAR E NUM";    // Size Don't Know
        final String c3 = "VARCHAR";  // Size Required

        // requiredIntOptional, requiredInt, requiredNothing = 1, 2, 0
        if (c1.contains(currentDataType)) {
            return 1;
        } else if (c2.contains(currentDataType)) {
            return 0;
        } else if (c3.contains(currentDataType)) {
            return 2;
        }
        return 0;
    }

    /**
     * Get Size to New Column Data Type
     *
     * @return Size
     */
    private String getColumnSize() {
        try {
            if (isEmpty(txt_column_size)) {
                return null;
            }
            return Integer.toString(Integer.parseInt(txt_column_size.getText()));
        } catch (NumberFormatException e) {
            Console.print(e.getMessage());
        }
        return null;
    }

    public void clearComboBox(JComboBox<String> cmb) {
        cmb.setModel(new DefaultComboBoxModel<>());
    }

    public static void showDialog(String msg, String title) {
        JOptionPane.showMessageDialog(null, msg, title, JOptionPane.ERROR_MESSAGE);
    }

    public boolean isEmpty(JTextField o) {
        return o.getText().isEmpty();
    }

    public boolean isEmpty(String o) {
        if (o == null) {
            return true;
        }
        return o.isEmpty();
    }

    public void initTableView() {
        if (!isEmpty(currentTB)) {
            DefaultTableModel model = db.setTableView(currentTB);
            table_view.setModel(model);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_create_db;
    private javax.swing.JButton bt_create_table;
    private javax.swing.JButton bt_delete_all_data;
    private javax.swing.JButton bt_delete_db;
    private javax.swing.JButton bt_delete_row;
    private javax.swing.JButton bt_delete_selected_column;
    private javax.swing.JButton bt_delete_table;
    private javax.swing.JButton bt_exit_db;
    private javax.swing.JButton bt_insert_data;
    private javax.swing.JButton bt_select_db;
    private javax.swing.JButton bt_select_db2;
    private javax.swing.JButton bt_select_tb;
    private javax.swing.JButton bt_submit_column;
    private javax.swing.JButton bt_update_data;
    private javax.swing.JCheckBox chk_foreign_key;
    private javax.swing.JCheckBox chk_notnull;
    private javax.swing.JCheckBox chk_primary_key;
    private javax.swing.JComboBox<String> cmb_datatype;
    private javax.swing.JComboBox<String> cmb_db;
    private javax.swing.JComboBox<String> cmb_tb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> list_columns;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JTable table_view;
    private javax.swing.JTextArea txarea_console;
    private javax.swing.JTextField txt_column_size;
    private javax.swing.JTextField txt_db_name;
    private javax.swing.JTextField txt_db_name_delete;
    private javax.swing.JTextField txt_table_column;
    private javax.swing.JTextField txt_table_name;
    // End of variables declaration//GEN-END:variables
}
